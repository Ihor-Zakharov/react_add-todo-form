{"version":3,"sources":["api/users.ts","api/todos.ts","helpers/findUserByTodoUserId.ts","components/UserInfo/UserInfo.tsx","components/TodoInfo/TodoInfo.tsx","components/TodoList/TodoList.tsx","App.tsx","index.tsx"],"names":["id","name","username","email","title","completed","userId","findUserByTodoUserId","users","todoUserId","find","user","UserInfo","className","href","TodoInfo","todo","classNames","TodoList","todos","map","App","useState","setUsers","setTodos","emptyTitleError","emptyUserError","formValue","setFormValue","useEffect","usersFromServer","todosFromServer","action","method","onSubmit","event","preventDefault","error","prevState","userIdNumber","newTodo","sort","todoA","todoB","length","type","value","placeholder","onChange","target","disabled","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.5c65e006.chunk.js","sourcesContent":["export default [\n  {\n    id: 1,\n    name: 'Leanne Graham',\n    username: 'Bret',\n    email: 'Sincere@april.biz',\n  },\n  {\n    id: 2,\n    name: 'Ervin Howell',\n    username: 'Antonette',\n    email: 'Shanna@melissa.tv',\n  },\n  {\n    id: 3,\n    name: 'Clementine Bauch',\n    username: 'Samantha',\n    email: 'Nathan@yesenia.net',\n  },\n  {\n    id: 4,\n    name: 'Patricia Lebsack',\n    username: 'Karianne',\n    email: 'Julianne.OConner@kory.org',\n  },\n  {\n    id: 5,\n    name: 'Chelsey Dietrich',\n    username: 'Kamren',\n    email: 'Lucio_Hettinger@annie.ca',\n  },\n  {\n    id: 6,\n    name: 'Mrs. Dennis Schulist',\n    username: 'Leopoldo_Corkery',\n    email: 'Karley_Dach@jasper.info',\n  },\n  {\n    id: 7,\n    name: 'Kurtis Weissnat',\n    username: 'Elwyn.Skiles',\n    email: 'Telly.Hoeger@billy.biz',\n  },\n  {\n    id: 8,\n    name: 'Nicholas Runolfsdottir V',\n    username: 'Maxime_Nienow',\n    email: 'Sherwood@rosamond.me',\n  },\n  {\n    id: 9,\n    name: 'Glenna Reichert',\n    username: 'Delphine',\n    email: 'Chaim_McDermott@dana.io',\n  },\n  {\n    id: 10,\n    name: 'Clementina DuBuque',\n    username: 'Moriah.Stanton',\n    email: 'Rey.Padberg@karina.biz',\n  },\n];\n","export default [\n  {\n    id: 1,\n    title: 'delectus aut autem',\n    completed: true,\n    userId: 1,\n  },\n  {\n    id: 15,\n    title: 'some other todo',\n    completed: false,\n    userId: 1,\n  },\n  {\n    id: 2,\n    title: 'quis ut nam facilis et officia qui',\n    completed: false,\n    userId: 4,\n  },\n];\n","import { User } from '../types/user';\n\nexport function findUserByTodoUserId(users: User[], todoUserId: number) {\n\n  return users.find(user => user.id === todoUserId);\n}\n","import { User } from '../../types/user';\n\ninterface Props {\n  user: User;\n}\n\nexport const UserInfo: React.FC<Props> = ({ user }) => {\n  const { email, name } = user;\n\n  return (\n    <a className=\"UserInfo\" href={`mailto:${email}`}>\n      {name}\n    </a>\n  );\n};\n","import classNames from 'classnames';\nimport { findUserByTodoUserId } from '../../helpers/findUserByTodoUserId';\nimport { Todo } from '../../types/todo';\nimport { User } from '../../types/user';\nimport { UserInfo } from '../UserInfo';\n\ninterface Props {\n  todo: Todo;\n  users: User[];\n}\n\nexport const TodoInfo: React.FC<Props> = ({ todo, users }) => {\n  const {\n    title, completed, userId, id,\n  } = todo;\n\n  const user = findUserByTodoUserId(users, userId);\n\n  return (\n    <article\n      className={classNames('TodoInfo', { 'TodoInfo--completed': completed })}\n      data-id={id}\n    >\n      <h2 className=\"TodoInfo__title\">{title}</h2>\n\n      {user && <UserInfo user={user} />}\n    </article>\n  );\n};\n","import { Todo } from '../../types/todo';\nimport { User } from '../../types/user';\nimport { TodoInfo } from '../TodoInfo';\n\ninterface Props {\n  todos: Todo[];\n  users: User[];\n}\n\nexport const TodoList: React.FC<Props> = ({ todos, users }) => {\n  return (\n    <section className=\"TodoList\">\n      {todos.map((todo) => (\n        <TodoInfo\n          todo={todo}\n          key={todo.id}\n          users={users}\n        />\n      ))}\n    </section>\n  );\n};\n","import './App.scss';\n\nimport { useEffect, useState } from 'react';\nimport usersFromServer from './api/users';\nimport todosFromServer from './api/todos';\nimport { TodoList } from './components/TodoList';\nimport { User } from './types/user';\nimport { Todo } from './types/todo';\nimport { findUserByTodoUserId } from './helpers/findUserByTodoUserId';\n\ninterface FormValue {\n  userId: string;\n  title: string;\n  emptyTitleError: boolean;\n  emptyUserError: boolean;\n}\n\nexport const App = () => {\n  const [users, setUsers] = useState<User[]>([]);\n  const [todos, setTodos] = useState<Todo[]>([]);\n  const [formValue, setFormValue] = useState<FormValue>({\n    userId: '0',\n    title: '',\n    emptyTitleError: false,\n    emptyUserError: false,\n  });\n\n  useEffect(() => {\n    setUsers(usersFromServer);\n    setTodos(todosFromServer);\n  }, []);\n\n  const handleSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n\n    const { title, userId } = formValue;\n    let error = false;\n\n    if (userId === '0') {\n      setFormValue((prevState) => ({ ...prevState, emptyUserError: true }));\n      error = true;\n    }\n\n    if (title === '') {\n      setFormValue((prevState) => ({ ...prevState, emptyTitleError: true }));\n      error = true;\n    }\n\n    if (error) {\n      return;\n    }\n\n    const userIdNumber = +userId;\n    const user = findUserByTodoUserId(users, userIdNumber);\n\n    if (user) {\n      const newTodo = {\n        id:\n          todos.sort((todoA, todoB) => todoA.id - todoB.id)[todos.length - 1]\n            .id + 1,\n        title: formValue.title,\n        completed: false,\n        userId: userIdNumber,\n      };\n\n      setTodos([...todos, newTodo]);\n    }\n\n    setFormValue({\n      userId: '0',\n      title: '',\n      emptyTitleError: false,\n      emptyUserError: false,\n    });\n  };\n\n  const { title, userId } = formValue;\n\n  return (\n    <div className=\"App\">\n      <h1>Add todo form</h1>\n\n      <form action=\"/api/users\" method=\"GET\" onSubmit={handleSubmit}>\n        <div className=\"field\">\n          <input\n            type=\"text\"\n            data-cy=\"titleInput\"\n            value={title}\n            placeholder=\"Enter a title\"\n            onChange={(event) => {\n              if (formValue.emptyTitleError && event.target.value !== '') {\n                setFormValue((prevState) => ({\n                  ...prevState,\n                  emptyTitleError: false,\n                }));\n              }\n\n              setFormValue((prevState) => ({\n                ...prevState,\n                title: event.target.value,\n              }));\n            }}\n          />\n\n          {formValue.emptyTitleError && (\n            <span className=\"error\">Please enter a title</span>\n          )}\n        </div>\n\n        <div className=\"field\">\n          <select\n            data-cy=\"userSelect\"\n            value={userId}\n            onChange={(event) => {\n              if (formValue.emptyUserError && event.target.value !== '0') {\n                setFormValue((prevState) => ({\n                  ...prevState,\n                  emptyUserError: false,\n                }));\n              }\n\n              setFormValue((prevState) => ({\n                ...prevState,\n                userId: event.target.value,\n              }));\n            }}\n          >\n            <option value=\"0\" disabled>\n              Choose a user\n            </option>\n\n            {users.map((user) => (\n              <option key={user.id} value={user.id}>\n                {user.name}\n              </option>\n            ))}\n          </select>\n\n          {formValue.emptyUserError && (\n            <span className=\"error\">Please choose a user</span>\n          )}\n        </div>\n\n        <button type=\"submit\" data-cy=\"submitButton\">\n          Add\n        </button>\n      </form>\n\n      <TodoList todos={todos} users={users} />\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}